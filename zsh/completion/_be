#compdef be

# Zsh completion script for be. Rename this file to _be and copy in in your zsh
# function path (/usr/share/zsh/site-functions for instance).
#
# If you do not want to install it globally, you can copy it somewhere else and
# add that directory to $fpath. This must be done before compinit is called. If
# the file is copied to ~/.zsh.d, your ~/.zshrc file could look like this:
#
# fpath=("$HOME/.zsh.d" $fpath)
# autoload -U compinit
# compinit

_be_bug_descr() {
    local $bug=$1
}

_be() {
    local comps vcomps buglist kwds

    # First try to comlete using the full command
    comps=($($words --complete))

    # If it fails, remove the last word first
    [[ $? != 0 ]] && comps=($(${words[1,-2]} --complete))

    # Now filter the results and try to add some more details
    vcomps=()
    typeset -A buglist
    typeset -A kwds
    kwds=(
        "assign"        "Assign an individual or group to fix a bug"
        "comment"       "Add a comment to a bug"
        "commit"        "Commit the currently pending changes to the repository"
        "depend"        "Add/remove bug dependencies"
        "diff"          "Compare bug reports with older tree"
        "due"           "Set bug due dates"
        "help"          "Print help for given command or topic"
        "html"          "Generate a static HTML dump of the current repository status"
        "import_xml"    "Import comments and bugs from XML"
        "init"          "Create an on-disk bug repository"
        "list"          "List bugs"
        "merge"         "Merge duplicate bugs"
        "new"           "Create a new bug"
        "remove"        "Remove (delete) a bug and its comments"
        "serve"         "Serve repo over HTTP"
        "set"           "Change bug directory settings"
        "severity"      "Change a bug's severity level"
        "show"          "Show a particular bug, comment, or combination of both."
        "status"        "Change a bug's status level"
        "subscribe"     "(Un)subscribe to change notification"
        "tag"           "Tag a bug, or search bugs for tags"
        "target"        "Assorted bug target manipulations and queries"
    )

    for c in $comps; do
        # Ignore some keywords
        [[ "$c" == "--complete" ]] && continue

        # Bug ID: add the summary as a description
        if [[ "$c" =~ "/" ]]; then
            # Did we already read the bug list?
            if [[ ${#buglist} -eq 0 ]]; then
                # FIXME: if the command has a --repo argument, we should put it here too.
                local tab id st desc
                be list --status=all | while read line; do
                    tab=(${(s.:.)line})
                    id=$tab[1]
                    st=$tab[2]
                    desc=$tab[3]

                    id=${id#*/}
                    buglist+=("/$id" "\[$st\]$desc")
                done
            fi
            c="${c}[${buglist[$c]}]"

        # Something else: add a description if one is available
        elif [[ ${#kwds[$c]} -gt 0 ]]; then
            c="${c}[${kwds[$c]}]"
        fi

        vcomps+="$c"
    done

    _values "" $vcomps[@]
}

_be "$@"
